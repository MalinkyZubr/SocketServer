for all socket opts:
Major redundancy screwup, why cant send all just get the destination out of the schema??? DONE

make it so schemas can just receive a connection object and identify destination ip themselves DONE

make self.my_ip instance variable DONE

simplify server side request processing DONE

make it so the connection constructor automatically knows if it is serving a client or server DONE

FOr server:
Consider creating a config class to store configuration settings and use it in __init__ instead of hardcoding them as function parameters.
Use type hints in function signatures to improve code readability.
Use more descriptive variable names.
Consider splitting the code into smaller functions to make it easier to maintain and test.
When raising exceptions, use specific exceptions instead of a generic one like Exception.
Use a more secure password hashing library like bcrypt instead of the simple hashlib.
Use the if __name__ == '__main__' idiom to write a test script for the code.
use more secure ssl encryption

for client:
Consider separating the connection and communication logic from the selector logic. You can have separate methods for establishing a connection, receiving and sending messages, and using selectors.


Use context managers instead of manual resource management when opening files.

Use the logging module's exception method to log any exceptions that might occur.

Consider breaking down the connect_to_server method into smaller methods that can be easily unit tested.

Don't use os._exit(). Instead, raise an exception that can be caught and handled.

You can also add comments to describe the logic of your code.

for exceptions:
Consider using a constant value instead of hard-coding the default message text in each __init__ method. This can make it easier to update the default message in the future.
Consider adding descriptive error codes to each exception class to help identify the type of error that occurred.
Consider adding optional parameters to the __init__ method to allow for more customized error messages.
Consider using more specific exception classes for each error condition. For example, instead of using a general Exception class, consider using more specific exception classes like ValueError, AttributeError, etc.
Consider documenting the purpose and usage of each exception class.

for schemas: