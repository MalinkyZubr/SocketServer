MUST DO RESTRUCTURING OF COMMAND EXECUTION PROCESSES. The current schema, with command and kwargs as separate attributes of the command body schema does not translate well to be compatible with subprocess shell commands. THis must be modified to work more smoothly, but will require significant restructuring, and planning. Maybe make it so the command constructor can decide whether to use a list or a dict? Maybe use a more standardized protocol within the custom commands inside of the base server and base client

BLOAT ALERT!!! YOU CAN USE ARGPARSE TO DO THE COMMAND FUNCTIONS, STUPID!! ARGPARSE PARSE ARGS CAN TAKE LIST OF STRINGS. USE THESE ON THE BUILT IN FUNCTIONS. IF BUILT IN FUNCTION NOT DETECTED *JUST RUN THE SUBPROCESS*

DEVELOP A METHOD TO DO ENFORCED TYPE HINTING!

too much schema bloat! simplify schema operations immediately!!!

make it easier for users to send messages to either server or client

for all socket opts:
FOr server:
Use a more secure password hashing library like bcrypt instead of the simple hashlib.
use more secure ssl encryption. working on it

for client:
Use the logging module's exception method to log any exceptions that might occur.

Consider breaking down the connect_to_server method into smaller methods that can be easily unit tested.

Don't use os._exit(). Instead, raise an exception that can be caught and handled.

You can also add comments to describe the logic of your code.

add standardized commands for the client to make operations easier

make filter code more efficient. DOnt have trty accepts in every case, just have each throw error under conditions and have one try accept

for exceptions:
Consider adding optional parameters to the __init__ method to allow for more customized error messages.

for schemas: